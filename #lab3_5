#include <mpi.h>
#include <iostream>
#include <cstdlib>
#include <ctime>
#include "windows.h"
using namespace std;
void Merge(int *A, int first, int last)
{
	int middle, start, final, j;
	int *mas=new int[100];
	middle=(first+last)/2; //вычисление среднего элемента
	start=first; //начало левой части
	final=middle+1; //начало правой части
	for(j=first; j<=last; j++) //выполнять от начала до конца
	if ((start<=middle) && ((final>last) || (A[start]<A[final])))
	{
		mas[j]=A[start];
		start++;
	}
	else
	{
		mas[j]=A[final];
		final++;
	}
	//возвращение результата в список
	for (j=first; j<=last; j++) A[j]=mas[j];
	delete[]mas;
}
//рекурсивная процедура сортировки
void MergeSort(int *A, int first, int last)
{	
	if (first<last)
	{
		MergeSort(A, first, (first+last)/2); //сортировка левой части
		MergeSort(A, (first+last)/2+1, last); //сортировка правой части
		Merge(A, first, last); //слияние двух частей
	}	
}
int main(int argc, char **argv)
{		
	int rank,mas1[4],mas2[4],glob_mas[8],glob[8],i,size;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	if (!rank)
	{		
		cout<<"print global_mas(8): " << endl;		
		for(int i = 0; i < 8; i++)
		{
				glob_mas[i] = rand()%100;	
				cout<<glob_mas[i]<<" ";
		}				
		cout<<endl;
		cout << "Process: " << rank << endl;
		
		MPI_Scatter(glob_mas,4,MPI_INT,mas1,4,MPI_INT,0,MPI_COMM_WORLD);
		MergeSort(mas1,0,3);
		for (i=0;i<4;i++) cout<<mas1[i]<<" ";
		cout<<endl;	
		MPI_Gather(mas1,4,MPI_INT,glob,4,MPI_INT,0,MPI_COMM_WORLD);
		cout << endl;
		
		cout << "Obednanuy masuv: " << endl;
		for (i=0;i<8;i++) cout<<glob[i]<<" ";
		cout<<endl;	
		MergeSort(glob,0,7);
		cout << "Vidsortovanuy masuv zluttyam:" << endl;
		for (i=0;i<8;i++) cout<<glob[i]<<" ";
		cout<<endl;
	}
	if(rank==1)
	{
		Sleep(1000);
		cout << "Process: " << rank << endl;
		MPI_Scatter(&glob_mas,4,MPI_INT,&mas2,4,MPI_INT,0,MPI_COMM_WORLD);
		MergeSort(mas2,0,3);
		for (i=0;i<4;i++) cout<<mas2[i]<<" ";
		cout<<endl;
		MPI_Gather(&mas2,4,MPI_INT,&glob,4,MPI_INT,0,MPI_COMM_WORLD);
	}	
	MPI_Finalize();
	return 0;
}
