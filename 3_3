#include <mpi.h>
#include <iostream>
#include <cstdlib>
#include <string>
using namespace std;
int main(int argc, char **argv)
{
	MPI_Init(&argc, &argv);
	MPI_Request request;
	MPI_Status status;
	int rank, chuslo, chuslo1,TAG = 0;
	char message[100];
	//MS-MPI Redistributable Package
	char ms1[] = "MS-";
	char ms2[] = "MPI";
	char ms3[] = " Red";
	char ms4[] = "ist";
	char ms5[] = "rib";
	char ms6[] = "uta";
	char ms7[] = "ble";
	char ms8[] = " Pac";
	char ms9[] = "kage";
	
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	switch(rank)
	{
	case 0:		
		MPI_Issend(&ms1, 4 , MPI_CHAR, 9, TAG, MPI_COMM_WORLD,&request);
		MPI_Wait(&request,&status);
		break;
	case 1:		
		MPI_Issend(&ms2, sizeof(ms2) , MPI_CHAR, 9, TAG, MPI_COMM_WORLD,&request);
		MPI_Wait(&request,&status);
		break;
	case 2:
		MPI_Issend(&ms3, sizeof(ms3) , MPI_CHAR, 9, TAG, MPI_COMM_WORLD,&request);
		MPI_Wait(&request,&status);
		break;
	case 3:
		
		MPI_Issend(&ms4, sizeof(ms4) , MPI_CHAR, 9, TAG, MPI_COMM_WORLD,&request);
		MPI_Wait(&request,&status);
		break;
	case 4:
		
		MPI_Issend(&ms5, sizeof(ms5) , MPI_CHAR, 9, TAG, MPI_COMM_WORLD,&request);
		MPI_Wait(&request,&status);
		break;
	case 5:
		
		MPI_Issend(&ms6, sizeof(ms6) , MPI_CHAR, 9, TAG, MPI_COMM_WORLD,&request);
		MPI_Wait(&request,&status);
		break;
	case 6:
		
		MPI_Issend(&ms7, sizeof(ms7) , MPI_CHAR, 9, TAG, MPI_COMM_WORLD,&request);
		MPI_Wait(&request,&status);
		break;
	case 7:
		
		MPI_Issend(&ms8, sizeof(ms8) , MPI_CHAR, 9, TAG, MPI_COMM_WORLD,&request);
		MPI_Wait(&request,&status);
		break;
	case 8:
		
		MPI_Issend(&ms9, sizeof(ms9) , MPI_CHAR, 9, TAG, MPI_COMM_WORLD,&request);
		MPI_Wait(&request,&status);
		break;
	case 9:
		MPI_Irecv(&ms1, sizeof(ms1) , MPI_CHAR, 0, TAG, MPI_COMM_WORLD, &request);
		MPI_Wait(&request,&status);
		MPI_Irecv(&ms2, sizeof(ms2) , MPI_CHAR, 1, TAG, MPI_COMM_WORLD, &request);
		MPI_Wait(&request,&status);
		MPI_Irecv(&ms3, sizeof(ms3) , MPI_CHAR, 2, TAG, MPI_COMM_WORLD, &request);
		MPI_Wait(&request,&status);
		MPI_Irecv(&ms4, sizeof(ms4) , MPI_CHAR, 3, TAG, MPI_COMM_WORLD, &request);
		MPI_Wait(&request,&status);
		MPI_Irecv(&ms5, sizeof(ms5) , MPI_CHAR, 4, TAG, MPI_COMM_WORLD, &request);
		MPI_Wait(&request,&status);
		MPI_Irecv(&ms6, sizeof(ms6) , MPI_CHAR, 5, TAG, MPI_COMM_WORLD, &request);
		MPI_Wait(&request,&status);
		MPI_Irecv(&ms7, sizeof(ms7) , MPI_CHAR, 6, TAG, MPI_COMM_WORLD, &request);
		MPI_Wait(&request,&status);
		MPI_Irecv(&ms8, sizeof(ms8) , MPI_CHAR, 7, TAG, MPI_COMM_WORLD, &request);
		MPI_Wait(&request,&status);
		MPI_Irecv(&ms9, sizeof(ms9) , MPI_CHAR, 8, TAG, MPI_COMM_WORLD, &request);
		MPI_Wait(&request,&status);
		strcpy(message,ms1);
		strcat(message,ms2);
		strcat(message,ms3);
		strcat(message,ms4);
		strcat(message,ms5);
		strcat(message,ms6);
		strcat(message,ms7);
		strcat(message,ms8);
	    strcat(message,ms9);
		cout << "Last process:  " << "Povidomlennya -   " << message << endl;
		break;
	default:
		cout << "Zaveluka kilkist procesiv" << endl;
		break;
	}
	MPI_Finalize();
	return 0;
}
